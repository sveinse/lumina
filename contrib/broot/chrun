#!/bin/bash

ME="$(basename $0)"

# Default settings
qemu=/usr/bin/qemu-arm-static
mounts=()
volume=()
workdir=/

# Usage
usage ()
{
cat <<EOF
Usage: $ME [OPTIONS] DIR [--] [COMMAND...]

  Chroot Run. Run COMMAND in the chrooted environment given by DIR.
  $ME clears the environment, sets the optional environment veriables
  given by --env, mount /proc and /dev/pts inside DIR, chroots to
  DIR and runs the command.

Options:
  -h, --help     Print this help
EOF
}

# -- Parse arguments
args=()
while [[ "$#" -gt 0 ]]
do
    case "$1" in
        -h|--help)
            usage
            exit 1
            ;;
        -v|--volume)
            volume+=("$2")
            shift
            ;;
        -w|--workdir)
            workdir="$2"
            shift
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo "$ME: Invalid option '$1'"
            exit 1
            ;;
        *)
            args+=("$1")
            ;;
    esac
    shift
done

# Catch up any args after -- as well
while [[ "$#" -gt 0 ]]; do
    args+=("$1")
    shift
done

# -- Check remaining arg count
if [[ ${#args[@]} -lt 1 ]]; then
    usage
    echo
    echo "$ME: Too few arguments"
    exit 1
fi
# Default unless other arguments are given
if [[ ${#args[@]} -lt 2 ]]; then
    args=("${args[0]}" "/bin/bash" "--login")
fi

# Check permissions
if [[ "$(id -u)" != "0" ]]; then
    echo "$ME: You don't have sufficient privileges to run this script."
    exit 1
fi


# Directory to run chroot in
dir="${args[0]}"
unset 'args[0]'

if [[ ! -e "$dir" ]]; then
    echo "$ME: $dir: No such file or directory"
    exit 1
fi


umount_all()
{
    for (( i=${#mounts[@]}-1; i>=0; i-- )); do
        umount -f "${mounts[$i]}" || true
    done
}

cleanup()
{
    # Cleanups
    if [[ "$qemu" ]]; then
        rm -f usr/bin/qemu-arm-static
    fi
}

interrupt()
{
    cleanup
    umount_all
    exit 1
}


# Go to chroot dir
cd "$dir"

# Handle Ctrl+C & friends
trap interrupt 1 2 3 6 15

# Make sure the target may run chroot
if [[ "$qemu" ]]; then
    mkdir -p usr/bin
    cp "$qemu" usr/bin/
fi

# Mount the dynamic FS on the target
mkdir -p proc dev dev/pts sys run tmp
mount -B /proc proc && mounts+=(proc)
mount -B /sys sys && mounts+=(sys)
mount -B /dev dev && mounts+=(dev)
mount -B /dev/pts dev/pts && mounts+=(dev/pts)
mount -t tmpfs none run && mounts+=(run)
mkdir run/lock
mount -t tmpfs none run/lock && mounts+=(run/lock)
#mount -B "$(realpath "$(dirname "${BASH_SOURCE[0]}")/../../..")" build && mounts+=(build)

# Setup target script
cat >tmp/chroot-stager <<EOF
#!/bin/sh
cd "$workdir"
$(printf "'%s' " "${args[@]}")
EOF
chmod +x tmp/chroot-stager
cat tmp/chroot-stager

# Run the chroot
env -i \
    USER=$USER \
    DEBIAN_FRONTEND=noninteractive \
    PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin \
    SHELL=/bin/bash \
    /usr/sbin/chroot . tmp/chroot-stager
status=$?

# Done
cleanup
umount_all
exit $status
