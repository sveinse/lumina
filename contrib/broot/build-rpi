#!/bin/bash

ME="$(basename "$0")"
base="$(dirname "$(realpath "${BASH_SOURCE[0]}")")"

# -- Print usage
usage () {
    cat <<EOF
$ME -- Build Raspberry Pi (Rasbian Jessie) Docker image
(C) 2016 Svein Seldal <sveinse@seldal.com>

This tool builds a Raspbian Jessie Docker image 'broot:rpi' and sets up
a debian build environment. It copies the installation from the given
SDCARD_IMAGE, which must be an uncompressed image, not zipped.

This tool requests sudo access to be able to manipulate the SDCARD_IMAGE.

Usage: $ME [OPTIONS] SDCARD_IMAGE

Options:
  -h, --help    Print this help
EOF
}


# -- Parse arguments
args=()
while [[ "$#" -gt 0 ]]
do
    case "$1" in
        -h|--help)
            usage
            exit 1
            ;;
        --)
            shift
            break
            ;;
        -*)
            echo "$ME: Invalid option '$1'"
            exit 1
            ;;
        *)
            args+=("$1")
            ;;
    esac
    shift
done

# Catch up any args after -- as well
while [[ "$#" -gt 0 ]]; do
    args+=("$1")
    shift
done


# -- Check remaining arg count
if [[ ${#args[@]} -lt 1 ]]; then
    usage
    echo
    echo "$ME: Too few arguments"
    exit 1
fi


# Check permissions
#if [[ "$(id -u)" != "0" ]]; then
#    echo "$ME: You don't have sufficient privileges to run this script."
#    exit 1
#fi


img="${args[0]}"
#dir="${args[1]}"

if [[ ! -e "$img" ]]; then
    echo "$ME: $img: No such file or directory"
    exit 1
fi
#if [[ -e "$dir" ]]; then
#    echo "$ME: $dir: Already exists"
#    exit 1
#fi


cleanup() {
    if [[ "$m1" ]]; then
        sudo umount -f "${lo}p1"
    fi
    if [[ "$m2" ]]; then
        sudo umount -f "${lo}p2"
    fi
    if [[ "$lo" ]]; then
        sudo losetup -d "$lo"
    fi
    if [[ "$t" ]]; then
        sudo rm -rf "$t"
    fi
}

interrupt()
{
    cleanup
    exit 1
}

unset lo t m1 m2

# Handle Ctrl+C & friends
trap interrupt 1 2 3 6 15


# -------------------------------------------------------------------------
# Functional code

set -x
lo="$(sudo losetup --show -f "$img")"
sudo partprobe "$lo"

t="$(mktemp -d)"
r="$t/rootfs"
mkdir "$t/r"

m2="$(sudo mount "${lo}p2" "$t/r" && echo 'y')"
m1="$(sudo mount "${lo}p1" "$t/r/boot" && echo 'y')"

sudo rsync -aHAX $t/r/ $r/

sudo umount -f "${lo}p1" && unset m1
sudo umount -f "${lo}p2" && unset m2
sudo losetup -d "$lo" && unset lo

rm -rf "$t/r"

sudo cp /usr/bin/qemu-arm-static $r/usr/bin/qemu-arm-static
sudo rm -f $r/etc/ld.so.preload

cp -av "$base/Dockerfile.rpi" $t/Dockerfile

sudo cp "$base/setup-rpi" $r/tmp/setup-rpi

sudo docker build -t broot:rpi $t

cleanup
exit 0
