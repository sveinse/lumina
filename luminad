#!/usr/bin/env python
# -*-python-*-
from lumina import lumina
import argparse
import os,sys,atexit

pidfile = '/var/run/lumina'

def delpid():
    try:
        os.remove(pidfile)
    except OSError:
        pass

ap = argparse.ArgumentParser()
ap.add_argument('--daemon', action='store_true', help='Daemonize application')
ap.add_argument('--pidfile', help="Set the pidfile", metavar="FILENAME")
ap.add_argument('--syslog', action='store_true', default=False, help="Enable syslog logging")

opts = ap.parse_args()
if opts.pidfile:
    pidfile = opts.pidfile

if opts.daemon:

    try:
        with file(pidfile,'r') as pf:
            pid = int(pf.read().strip())
    except IOError:
        pid = None
    if pid:
        sys.stderr.write("%s: pidfile '%s' exists. Refusing to start daemon\n" %(sys.argv[0],pidfile))
        sys.exit(1)

    # Fork #1
    pid = os.fork()
    if pid > 0:
        sys.exit(0)

    os.chdir("/")
    os.setsid()
    os.umask(0)

    # Fork #2
    pid = os.fork()
    if pid > 0:
        sys.exit(0)

    # Redirect stdout
    sys.stdout.flush()
    sys.stderr.flush()
    si = file('/dev/null', 'r')
    so = file('/dev/null', 'a+')
    se = file('/dev/null', 'a+', 0)
    os.dup2(si.fileno(), sys.stdin.fileno())
    os.dup2(so.fileno(), sys.stdout.fileno())
    os.dup2(se.fileno(), sys.stderr.fileno())

    # Write pidfile
    atexit.register(delpid)
    file(pidfile,'w+').write(str(os.getpid()) + '\n')


# Run main program
lumina.main(use_syslog=opts.syslog)
